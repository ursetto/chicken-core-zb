#!/bin/sh
#| setversion - Bump version-number -*- Scheme -*-
exec csi -s "$0" "$@"
|#

(use srfi-1 utils posix irregex)

(define buildversion (->string (car (read-file "buildversion"))))
(define buildbinaryversion (car (read-file "buildbinaryversion")))

(define files '("README" "manual/The User's Manual"))

(define (patch which rx subst)
  (cond ((and (list? which) (= 2 (length which)))
	 (let ((from (car which))
	       (to (cadr which)))
	   (print "patching " from " ...")
	   (with-output-to-file to
	     (lambda ()
	       (with-input-from-file from
		 (lambda ()
		   (let loop ()
		     (let ((ln (read-line)))
		       (unless (eof-object? ln)
			 (write-line (irregex-replace/all rx ln subst))
			 (loop) ) ) ) )
		 #:binary) )
	     #:binary)))
	(else
	 (let ((tmp (create-temporary-file)))
	   (patch (list which tmp) rx subst)
	   (system* "mv ~S ~S" tmp which) ) ) ) )

(define (parse-version v)
  (let ((m (irregex-match "(\\d+)\\.(\\d+)\\.(\\d+)(.*)" v)))
    (list (irregex-match-substring m 0)
	  (irregex-match-substring m 1)
	  (irregex-match-substring m 2)
	  (irregex-match-substring m 3))))

(define (main args)
  (let ((major (##sys#fudge 41))
	(minor (##sys#fudge 43)))
    (cond ((member "-set" args) =>
	   (lambda (a)
	     (set! buildversion (cadr a))
	     (let ((b (parse-version buildversion)))
	       (set! major (cadr b))
	       (set! minor (caddr b)))))
	  ((not (member "-noinc" args))
	   (let* ((v (parse-version buildversion))
		  (maj (cadr v))
		  (min (caddr v))
		  (pl (cadddr v))
		  (huh (car (cddddr v))))
	     (set! major maj)
	     (set! minor min)
	     (set! buildversion
	       (conc maj "." min "." (add1 (string->number pl)) huh)) ) ) )
    (with-output-to-file "buildversion" (cut display buildversion) binary:)
    (system* "cat buildversion")
    (let ([vstr (sprintf "version ~A" buildversion)])
      (for-each (cut patch <> (irregex "version [0-9][-.0-9a-zA-Z]+") vstr) files) )
    (patch 
     "chicken.h"
     (irregex "C_MAJOR_VERSION[ \\t]+[0-9]+")
     (sprintf "C_MAJOR_VERSION   ~a" major))
    (patch 
     "chicken.h"
     (irregex "C_MINOR_VERSION[ \\t]+[0-9]+")
     (sprintf "C_MINOR_VERSION   ~a" minor))
    0))

(main (command-line-arguments))
